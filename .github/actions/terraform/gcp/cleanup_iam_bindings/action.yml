name: Cleanup IAM Bindings
description: "This action cleans up stale IAM bindings for deleted service accounts in GCP. It checks the IAM bindings in terraform.tfvars and removes any bindings for service accounts that no longer exist."

inputs:
  project_id:
    description: "Project ID"
    required: true
  dry_run:
    description: "Enable dry run mode to simulate the cleanup without making changes"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:

    # Authenticate to GCP
    - name: Authenticate with GCP
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ inputs.service_account }}
        export_environment_variables: true
        
    - name: Set up Google Cloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ inputs.project_id }}

    # Identify stale bindings 
    - name: Identify stale bindings
      shell: bash
      run: |
        echo "Identifying stale IAM bindings..."
        
        # Get the list of all service accounts in the project
        all_service_accounts=$(gcloud iam service-accounts list --project=${{ inputs.project_id }} --format="value(email)")
        echo "All service accounts: $all_service_accounts"
        
        # Get the IAM policy bindings
        iam_policy=$(gcloud projects get-iam-policy ${{ inputs.project_id }} --format="yaml")
        echo "IAM policy fetched."
        
        # Print IAM policy for debugging
        echo "IAM Policy:"
        echo "$iam_policy"
        
        # Initialize an empty array for stale bindings
        stale_bindings=()

        # Loop through the IAM policy bindings and identify any stale ones
        while read -r binding; do
          # Extract the service account email, ignoring 'deleted:' prefix
          service_account=$(echo "$binding" | grep -oP '(?<=serviceAccount:)[^?]+' || echo "$binding" | grep -oP '(?<=deleted:serviceAccount:)[^?]+')
          
          echo "Checking service account: $service_account"
          
          # If the service account is not in the active list, it's considered stale
          if ! echo "$all_service_accounts" | grep -q "$service_account"; then
            stale_bindings+=("$service_account")
            echo "Stale binding found: $service_account"
          fi
        done <<< "$(echo "$iam_policy" | grep -A 2 "members:" | grep "serviceAccount:" | sed 's/members://g')"
        
        # Check if we found any stale bindings and log them
        if [ ${#stale_bindings[@]} -eq 0 ]; then
          echo "No stale bindings found."
        else
          echo "Identified stale bindings: ${stale_bindings[@]}"
          echo "stale_bindings=${stale_bindings[@]}" >> $GITHUB_ENV
        fi

    - name: Remove stale IAM bindings
      shell: bash
      run: |
        if [[ "${{ inputs.dry_run }}" == "true" ]]; then
          echo "Dry run enabled. Skipping removal of bindings."
          echo "The following bindings would have been removed: ${stale_bindings[@]}"
        else
          for binding in "${stale_bindings[@]}"; do
            echo "Removing binding for deleted service account: $binding"
            roles=$(gcloud projects get-iam-policy ${{ inputs.project_id }} --format="yaml" \
              | grep -A 2 "members:" \
              | grep -B 2 "serviceAccount:$binding" \
              | grep "role:" \
              | sed 's/role: //')
            for role in $roles; do
              gcloud projects remove-iam-policy-binding ${{ inputs.project_id }} \
                --member=serviceAccount:$binding \
                --role=$role
            done
          done
        fi

    - name: Verify IAM bindings
      shell: bash
      run: |
        echo "Verifying IAM bindings after cleanup..."
        gcloud projects get-iam-policy ${{ inputs.project_id }} --format=json