name: Cleanup IAM Bindings
description: "This action cleans up stale IAM bindings for deleted service accounts in GCP. It checks the IAM bindings in terraform.tfvars and removes any bindings for service accounts that no longer exist."

inputs:
  project_id:
    description: "Project ID"
    required: true
  dry_run:
    description: "Enable dry run mode to simulate the cleanup without making changes"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:

    # Authenticate to GCP
    - name: Authenticate with GCP
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ inputs.service_account }}
        export_environment_variables: true
        
    - name: Set up Google Cloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ inputs.project_id }}

    # Identify stale bindings 
    - name: Identify and remove stale IAM bindings
      shell: bash
      run: |
        echo "üîç Identifying deleted service accounts in IAM bindings..."

        # Get active service accounts in the project
        all_service_accounts=$(gcloud iam service-accounts list \
          --project=${{ inputs.project_id }} \
          --format="value(email)")

        echo "‚úÖ Active service accounts fetched."

        # Fetch IAM policy
        iam_policy=$(gcloud projects get-iam-policy ${{ inputs.project_id }} --format="yaml")
        echo "‚úÖ IAM policy fetched."

        # Debug output
        echo "IAM Policy:"
        echo "$iam_policy"

        # Initialize an empty array for stale bindings
        stale_bindings=()

        # Extract deleted service accounts from IAM policy
        while read -r line; do
          if [[ "$line" == *"deleted:serviceAccount:"* ]]; then
            # Extract email ignoring uid
            email=$(echo "$line" | grep -oP '(?<=deleted:serviceAccount:)[^?]+')
            # Avoid duplicates
            if [[ ! " ${stale_bindings[*]} " =~ " $email " ]]; then
              stale_bindings+=("$email")
            fi
          fi
        done <<< "$(echo "$iam_policy" | grep 'deleted:serviceAccount:')"

        # Check and log stale bindings
        if [ ${#stale_bindings[@]} -eq 0 ]; then
          echo "‚úÖ No deleted service accounts found in IAM policy."
          echo "stale_bindings=" >> $GITHUB_ENV
          exit 0
        fi

        echo "üö® Identified stale (deleted) service accounts: ${stale_bindings[*]}"
        echo "stale_bindings=${stale_bindings[*]}" >> $GITHUB_ENV

        # If dry run is enabled, skip actual deletion
        if [[ "${{ inputs.dry_run }}" == "true" ]]; then
          echo "üí° Dry run enabled. The following bindings would be removed:"
          for sa in "${stale_bindings[@]}"; do
            echo "- $sa"
          done
          exit 0
        fi

        echo "üßπ Removing IAM bindings for deleted service accounts..."

        for sa in "${stale_bindings[@]}"; do
          echo "üîé Processing $sa"
          
          # Find roles associated with this service account
          roles=$(echo "$iam_policy" | grep -B 5 "serviceAccount:$sa" | grep "role:" | awk '{print $2}' | sort -u)

          if [[ -z "$roles" ]]; then
            echo "‚ö†Ô∏è No roles found for $sa. Skipping..."
            continue
          fi

          for role in $roles; do
            echo "‚ùå Attempting to remove role $role for $sa"
            
            # Try to remove the role, only if it exists
            remove_result=$(gcloud projects remove-iam-policy-binding ${{ inputs.project_id }} \
              --member="serviceAccount:$sa" \
              --role="$role" --quiet 2>&1)

            # Check if the role was removed successfully
            if [[ "$remove_result" == *"Policy binding with the specified principal, role, and condition not found!"* ]]; then
              echo "‚ö†Ô∏è No such binding found for $sa and role $role. Skipping removal."
            else
              echo "‚úÖ Successfully removed $role for $sa"
            fi
          done

          echo "‚úÖ Cleaned up: $sa"
        done



    - name: Remove stale IAM bindings
      shell: bash
      run: |
        if [[ "${{ inputs.dry_run }}" == "true" ]]; then
          echo "Dry run enabled. Skipping removal of bindings."
          echo "The following bindings would have been removed: ${stale_bindings[@]}"
        else
          for binding in "${stale_bindings[@]}"; do
            echo "Removing binding for deleted service account: $binding"
            roles=$(gcloud projects get-iam-policy ${{ inputs.project_id }} --format="yaml" \
              | grep -A 2 "members:" \
              | grep -B 2 "serviceAccount:$binding" \
              | grep "role:" \
              | sed 's/role: //')
            for role in $roles; do
              gcloud projects remove-iam-policy-binding ${{ inputs.project_id }} \
                --member=serviceAccount:$binding \
                --role=$role
            done
          done
        fi

    - name: Verify IAM bindings
      shell: bash
      run: |
        echo "Verifying IAM bindings after cleanup..."
        gcloud projects get-iam-policy ${{ inputs.project_id }} --format=json