name: Cleanup IAM Bindings
description: "This action cleans up stale IAM bindings for deleted service accounts in GCP. It checks the IAM bindings in terraform.tfvars and removes any bindings for service accounts that no longer exist."

inputs:
  project_id:
    description: "Project ID"
    required: true
  dry_run:
    description: "Enable dry run mode to simulate the cleanup without making changes"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:

    - name: CHECK 
      run: echo "✅✅✅✅✅✅ now here..."
      shell: bash

    # Authenticate to GCP
    - name: Authenticate with GCP
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ inputs.service_account }}
        export_environment_variables: true
        
    - name: Set up Google Cloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ inputs.project_id }}

    # Identify stale bindings (Customize this step to match your stale logic)
    - name: Identify stale bindings
      shell: bash
      id: identify
      run: |
        echo "Identifying stale IAM bindings..."
        stale_bindings=()
        
        # Loop through each binding and check if the service account still exists
        for binding in $(cat bindings.json | grep -oP '"member": "\K[^"]*' | grep '@gcp-sa\|@.*iam.gserviceaccount.com'); do
          service_account_email=$binding
          
          # Check if the service account exists by using gcloud IAM service accounts list
          account_check=$(gcloud iam service-accounts list --filter="email=$service_account_email" --format="value(email)")

          if [ -z "$account_check" ]; then
            echo "Service account $service_account_email no longer exists, marking binding as stale."
            stale_bindings+=($service_account_email)
          fi
        done
        
        # Output the list of stale bindings
        echo "Identified stale bindings: ${stale_bindings[@]}"
        echo "::set-output name=stale_bindings::${stale_bindings[@]}"

    # Remove stale IAM bindings (with dry run option)
    - name: Remove stale IAM bindings
      shell: bash
      run: |
        if [[ "${{ inputs.dry_run }}" == "true" ]]; then
          echo "Dry run enabled. Skipping removal of bindings."
          echo "The following bindings would have been removed: ${{ steps.identify.outputs.stale_bindings }}"
        else
          for binding in ${{ steps.identify.outputs.stale_bindings }}; do
            echo "Removing binding for deleted service account: $binding"
            gcloud projects remove-iam-policy-binding ${{ inputs.project_id }} \
              --member=serviceAccount:$binding \
          done
        fi

    # Verify IAM bindings after cleanup
    - name: Verify IAM bindings
      shell: bash
      run: |
        echo "Verifying IAM bindings after cleanup..."
        gcloud projects get-iam-policy ${{ inputs.project_id }} --format=json