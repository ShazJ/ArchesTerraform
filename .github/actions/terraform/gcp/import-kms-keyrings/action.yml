name: "Import GCP KMS Key Rings"
description: "Checks for existing GCP KMS key rings and imports them into Terraform if found."

inputs:
  project_id:
    description: "Project ID"
    required: true
  location:
    description: "KMS location (e.g. global)"
    required: false
    default: "global"
  keyring_names:
    description: "Comma-separated list of key ring names to check and import"
    required: true

runs:
  using: "composite"
  steps:

    - name: CHECK 
      run: echo "‚úÖ‚úÖ now here..."
      shell: bash

    # Authenticate to GCP
    - name: Authenticate with GCP
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ inputs.service_account }}
        export_environment_variables: true
        
    - name: Set up Google Cloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ inputs.project_id }}

    - name: Import existing key rings from terraform.tfvars
      shell: bash
      run: |
        echo "üêç Installing python-hcl2..."
        pip install python-hcl2 --quiet

        echo "üì¶ Running import logic..."
        python <<EOF
        import hcl2
        import subprocess
        from pathlib import Path

        LOCATION = "${{ inputs.location }}"
        PROJECT_ID = "${{ inputs.project_id }}"

        # Load terraform.tfvars
        with open("terraform.tfvars", "r") as f:
            tfvars = hcl2.load(f)

        kms_key_rings = tfvars.get("kms_key_rings", {})

        for map_key, config in kms_key_rings.items():
            key_ring_name = config.get("name")
            tf_resource = f'module.kms_key_ring["{map_key}"].google_kms_key_ring.key_ring'
            gcp_resource = f'projects/{PROJECT_ID}/locations/{LOCATION}/keyRings/{key_ring_name}'

            print(f"üîç Checking if key ring '{key_ring_name}' resource is already in state...")

            # Check if the resource is in the state
            check_state_command = f"terraform state list | grep 'module.kms_key_ring[\"{map_key}\"]' | grep 'google_kms_key_ring.key_ring' > /dev/null"
            result = subprocess.run(check_state_command, shell=True)

            if result.returncode == 0:
                print(f"‚úÖ Key ring '{key_ring_name}' already in state. Skipping import.")
                continue  # Skip importing if the key ring is already in the state

            # Check if the key ring exists in GCP
            print(f"üîç Checking if key ring '{key_ring_name}' exists in GCP...")
            result = subprocess.run(
                [
                    "gcloud", "kms", "keyrings", "describe",
                    key_ring_name,
                    f"--location={LOCATION}",
                    f"--project={PROJECT_ID}"
                ],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )

            if result.returncode == 0:
                print(f"‚úÖ Key ring found. Importing as: {tf_resource}")
                subprocess.run(["terraform", "import", tf_resource, gcp_resource], check=True)
            else:
                print(f"‚ö†Ô∏è Key ring '{key_ring_name}' not found. Skipping.")

            # Handle crypto keys
            crypto_keys = config.get("crypto_keys", {})
            for crypto_key_key, crypto_key_conf in crypto_keys.items():
                crypto_key_name = crypto_key_conf.get("name")

                tf_crypto_resource = f'module.kms_key_ring["{map_key}"].google_kms_crypto_key.crypto_key["{crypto_key_key}"]'
                gcp_crypto_resource = f"projects/{PROJECT_ID}/locations/{LOCATION}/keyRings/{key_ring_name}/cryptoKeys/{crypto_key_name}"

                print(f"üîç Importing crypto key '{crypto_key_name}' for key ring '{key_ring_name}'")
                subprocess.run(["terraform", "import", tf_crypto_resource, gcp_crypto_resource], check=True)

        print("‚úÖ All key rings and crypto keys imported successfully.")
        EOF
