name: Continuous integration - Validate Terraform 

on:
  push:
    branches:
      - dev
      - uat
      - prod

jobs:
  terraform-deploy:
    name: Terraform Validate
    runs-on: ubuntu-latest

    # Specify environment for prod branch
    environment: ${{ github.ref_name == 'prod' && 'prod' || '' }}

    env:
      TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
      GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # - name: Check for terraform version mismatch
      #   run: |
      #     DOTFILE_VERSION=$(cat .terraform-version)
      #     TERRAFORM_IMAGE_REFERENCES=$(grep "uses: docker://hashicorp/terraform" .github/workflows/continuous-integration-terraform.yml | grep -v TERRAFORM_IMAGE_REFERENCES | wc -l | tr -d ' ')
      #     if [ "$(grep "docker://hashicorp/terraform:${DOTFILE_VERSION}" .github/workflows/continuous-integration-terraform.yml | wc -l | tr -d ' ')" != "$TERRAFORM_IMAGE_REFERENCES" ]
      #     then
      #       echo -e "\033[1;31mError: terraform version in .terraform-version file does not match docker://hashicorp/terraform versions in .github/workflows/continuous-integration-terraform.yml"
      #       exit 1
      #     fi

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Determine environment based on branch
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.ref_name }}" == "dev" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "uat" ]]; then
            echo "environment=uat" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "prod" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          fi

      # Authenticate to GCP
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      # Terraform
      # Initialise
      - name: Run a Terraform init
        uses: docker://hashicorp/terraform:1.10.1
        with:
          entrypoint: terraform
          args: init

      # Validate
      - name: Run a Terraform validate
        uses: docker://hashicorp/terraform:1.10.1
        with:
          entrypoint: terraform
          args: validate

      # Format
      - name: Run a Terraform format check
        uses: docker://hashicorp/terraform:1.10.1
        with:
          entrypoint: terraform
          args: fmt -check=true -diff=true
      
      # Plan
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./environments/${{ steps.set-env.outputs.environment }}

      # Apply
      # - name: Terraform Apply
      #   run: terraform apply -auto-approve tfplan
      #   working-directory: ./environments/${{ steps.set-env.outputs.environment }}

  terraform-docs:
    name: Terraform Docs
    needs: terraform-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Render terraform docs and push back to PR
        uses: terraform-docs/gh-actions@main
        with:
          working-dir: .
          config-file: .terraform-docs.yml
      #    fail-on-diff: true
          output-file: README.md
          output-method: inject